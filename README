1. Potential Density Pair Classes
---------------------------------

This file contains all classes related to the PD pairs in real space. 

	PotentialDensityPair.h - This is the base class that contains all the functions to do with an indivudal PD pair,
	this includes virtual potential and density functions that will be define in a inherited class.

	KalnajsBasis.h (and others) - These classes inherit from the above class and define the methods to calculate the densiy and the potential. 
	These would be the classes you would add to if you want to add another set of potential-density pairs.

	PotentialDensityPairContainer.h - This is a template container class that groups PD pairs with a given fourier harmonic. In principle, 
	this is the only class that needs to be interacted with in this file (I can think of no reason why you would want an individual PD pair). 
	There is some functionality that I would like to add to this


2. DF Class
-----------

So this class contains the DF, which it turn gives the potential. The base class, 'DFClass', contains, in principle, all the methods
the will be needed. This includes those functions that are intemitately linked to the potential, e.g. \Omega_{1} or \Omega_{2}, etc.

If you want to have different DFs add them as subclasses to the DFClass, e.g. Mestel.h


2. Action Angle Basis Functions
-------------------------------

Again there are two files, a individual representation of a PD pair and a container class that groups them all togther. 

	ActionAngleBasisFunction.h - This saves all that is needed about a given potential density pair, its indicies and the grid.
	As it is part of a container class, it doesn't need to store m2 (which is equal to \ell).

	ActionAngleBasisContainer.h - A container class that contains many PD pairs with different n and m_{1}, but the same m_{2} (=\ell).
	This contains the memeber function that will generate and save the AA PD pair representation. Things to do,

		1) I think this class could be made clearer - saving the DF and the PD container as private memeber variables instead of passing the around
		Ã  la kernel generation. 

3. Volterra Solver
------------------ 

There are three class, one main and two part classes,

	EvolutionKernels.h - This stores all the kernels that are needed. It also has the memeber functions to generate the kernels (this is called 
	through the VolterraSolver class though)

	ExpansionCoeff.h - Contains the coefficent in potential density expasion, it is used from both the external perturbation and the self-consistent 
	response.

	VolterraSolver.h - Contains the methods to solve the volterra equation, the generation functions are also called from here. 

	*) I think we will need to write the member functions into a .cpp file

4. Bar Class
------------

We need memeber functions,
	4) Write bar evolution into VolterraSolver.h class